<?php

/**
 * @file
 * Contains ham_station.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\ham_station\Entity\HamLocation;

/**
 * Implements hook_help().
 */
function ham_station_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ham_station module.
    case 'help.page.ham_station':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Information about amateur radio stations') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function ham_station_theme($existing, $type, $theme, $path) {
  return [
    'ham_neighbors_report' => [
      'variables' => [
        'table' => NULL,
      ],
    ],
    'ham_neighbors' => [
      'variables' => [
        'form' => NULL,
        'info_blocks' => NULL,
        'export_link' => NULL,
      ],
    ],
  ];
}

function ham_station_location_label_callback(HamLocation $location) {
  return sprintf('%s,%s', $location->get('latitude')->value, $location->get('longitude')->value);
}

/**
 * Install new entity field from definition in entity.
 *
 * @param string $entity_type_id
 * Entity type id.
 * @param string $field_name
 * Field name.
 */
function ham_info_install_entity_field($entity_type_id, $field_name) {
  $storage_definition = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type_id)[$field_name];
  \Drupal::service('field_storage_definition.listener')->onFieldStorageDefinitionCreate($storage_definition);
}

/**
 * Implements hook_file_download().
 */
function ham_station_file_download($uri) {
  if (strpos($uri, 'private://ham-station-exports/') !== 0 || substr($uri, -4) !== '.csv') {
    return NULL;
  }

  /** @var \Drupal\file\Entity\File $file_entity */
  $file_entity = \Drupal::entityTypeManager()->getStorage('file')
    ->loadByProperties(['uri' => $uri]);

  if (empty($file_entity)) {
    return NULL;
  }

  $file_entity = reset($file_entity);

  return [
    'Content-disposition' => 'attachment; filename="' . $file_entity->getFilename() . '"',
  ];
}

/**
 * Implements hook_preprocess_HOOK() for the content region.
 */
function ham_station_preprocess_region__content(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'ham_station.ham_map') {
    $variables['attributes']['class'][] = 'map-page';
  }
}
