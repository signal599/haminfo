{#
/**
 * @file
 * Template for a Drodown component.
 *
 * Available config:
 * - dropdown_button_content: (optional) Dropdown button content.
 * - dropdown_button_attributes: (optional) Dropdown button attributes.
 * - dropdown_button_html_tag:  The HTML tag to use for the Dropdown button (button | a). Defaults to `button`.
 * - dropdown_button_url: URL link for the Dropdown button when the HTML tag is an anchor link.
 * - dropdown_size: (btn-sm | btn-lg) Bootstrap button size.
 * - split_button: (optional) Split button.
 * - dropdown_item_utility_classes: (optional) Dropdown item utility classes.
  * - dropdown_menu_attributes: (optional) Dropdown menu attributes.
  * - dropdown_utility_classes: (optional) Dropdown utility classes.
  * - dropdown_button_utility_classes: (optional) Dropdown button utility classes.
 * - dropdown_menu_utility_classes: (optional) Dropdown menu utility classes.
 * - dropdown_color: Bootstrap includes several predefined button styles, each serving its own
 *          semantic purpose, with a few extras thrown in for more control.
 *          (primary | secondary | success | danger | warning | info | dark | light | link)
 * - outline: (true|false) In need of a button, but not the hefty background colors they bring?
 * - disabled: (true|false) Disabled button.
 * - items: (optional) Dropdown items.
 * - dropdown_menu: (optional) Dropdown menu.
 * - dropdown_toggler: (optional) Dropdown toggler.
 */
#}
{% apply spaceless %}

{% set split_button = split_button ? split_button : false %}
{% set dropdown_button_html_tag = dropdown_button_html_tag|default(dropdown_button_url ? 'a' : 'button') %}
{% set dropdown_size = dropdown_size|default('btn-lg') %}
{%
  set dropdown_button_attributes = create_attribute()
    .setAttribute('type', 'button')
    .setAttribute('data-bs-toggle', split_button ? '' : 'dropdown')
    .setAttribute('aria-expanded', 'false')
%}
{% set dropdown_attributes = dropdown_attributes ?: create_attribute() %}
{% set dropdown_menu_attributes = dropdown_menu_attributes ?: create_attribute() %}
{%
  set dropdown_classes = [
    'btn-group',
  ]|merge(dropdown_utility_classes ?: [])
%}
{%
  set dropdown_menu_classes = [
    'dropdown-menu',
  ]|merge(dropdown_menu_utility_classes ?: [])
%}
{%
  set dropdown_button_classes = [
    split_button ? '' :'dropdown-toggle'
  ]|merge(dropdown_button_utility_classes ?: [])
%}

<div {{ dropdown_attributes.addClass(dropdown_classes) }}>
  {% block dropdown_toggler %}
    {%
      include 'radix:button' with {
        content: dropdown_button_content|default('Dropdown button'),
        button_attributes: dropdown_button_attributes,
        button_html_tag: dropdown_button_html_tag,
        url: dropdown_button_url,
        size: dropdown_size,
        color: dropdown_color|default('primary'),
        button_utility_classes: dropdown_button_classes,
      }
    %}

    {% if split_button %}
      {%
        set dropdown_split_button_attributes = create_attribute()
          .setAttribute('type', 'button')
          .setAttribute('data-bs-toggle','dropdown')
          .setAttribute('aria-expanded', 'false')
      %}

      {%
        embed 'radix:button' with {
          button_attributes: dropdown_split_button_attributes,
          size: dropdown_size,
          button_utility_classes: [
            'dropdown-toggle',
            'dropdown-toggle-split'
          ]|merge(dropdown_button_classes),
          color: dropdown_color|default('primary'),
          outline: outline|default(false),
          disabled: disabled|default(false),
        } only
      %}
        {% block content %}
          <span class="visually-hidden">Toggle Dropdown</span>
        {% endblock %}
      {% endembed %}
    {% endif %}
  {% endblock %}

  <ul {{ dropdown_menu_attributes.addClass(dropdown_menu_classes) }}>
    {% block dropdown_menu %}
      {% if items is iterable %}
        {% for item in items %}
          {% set dropdown_item_attributes = create_attribute() %}
          {%
            set dropdown_item_classes = [
              'dropdown-item',
              item.in_active_trail ? 'active' : '',
            ]|merge(dropdown_item_utility_classes ?: [])
          %}
          {% if item.url.options.attributes.class is iterable %}
            {% set dropdown_item_classes = dropdown_item_classes|merge(item.url.options.attributes.class) %}
          {% elseif item.url.options.attributes.class %}
            {% set dropdown_item_classes = dropdown_item_classes|merge([item.url.options.attributes.class]) %}
          {% endif %}

          <li>
            <a {{ dropdown_item_attributes.addClass(dropdown_item_classes) }} href="{{ item.url }}">{{ item.title }}</a>
          </li>
        {% endfor %}
      {% endif %}
    {% endblock  %}
  </ul>
</div>

{% endapply %}
